# Use
#    @warnpcfail precompile(args...)
# if you want to be warned when a precompile directive fails
macro warnpcfail(ex::Expr)
    modl = __module__
    file = __source__.file === nothing ? "?" : String(__source__.file)
    line = __source__.line
    quote
        $(esc(ex)) || @warn """precompile directive
     $($(Expr(:quote, ex)))
 failed. Please report an issue in $($modl) (after checking for duplicates) or remove this directive.""" _file=$file _line=$line
    end
end


function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing

    Base.precompile(Tuple{AbstractAlgebra.Generic.MPolyRing{fmpz_mod},Singular.spoly{Singular.n_Zn}})
    Base.precompile(Tuple{AbstractAlgebra.Generic.RationalFunctionField{fmpq},Singular.n_transExt})
    Base.precompile(Tuple{AnticNumberField,GapObj})
    Base.precompile(Tuple{AutomorphismGroup{GrpAbFinGen},GrpAbFinGenMap})
    Base.precompile(Tuple{Core.kwftype(typeof(CheckValidType)),NamedTuple{(:isapg,), Tuple{Bool}},typeof(CheckValidType),Tuple{typeof(degree), Int64}})
    Base.precompile(Tuple{Core.kwftype(typeof(_find_radical)),NamedTuple{(:e, :_is_symmetric), Tuple{Int64, Bool}},typeof(_find_radical),fq_nmod_mat,FqNmodFiniteField,Int64,Int64})
    Base.precompile(Tuple{Core.kwftype(typeof(_vertex_indices)),NamedTuple{(:f_dim, :f_ind), Tuple{Int64, Vector{Int64}}},typeof(_vertex_indices),Val{Oscar._face_polyhedron},Polymake.BigObjectAllocated})
    Base.precompile(Tuple{Core.kwftype(typeof(direct_product)),NamedTuple{(:task,), Tuple{Symbol}},typeof(direct_product),FreeMod{fmpq_mpoly},FreeMod{fmpq_mpoly}})
    Base.precompile(Tuple{Core.kwftype(typeof(direct_product)),NamedTuple{(:task,), Tuple{Symbol}},typeof(direct_product),FreeMod{fmpq_mpoly},SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{Core.kwftype(typeof(direct_product)),NamedTuple{(:task,), Tuple{Symbol}},typeof(direct_product),SubQuo{fmpq_mpoly},SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{Core.kwftype(typeof(direct_sum)),NamedTuple{(:task,), Tuple{Symbol}},typeof(direct_sum),SubQuo{fmpq_mpoly},Vararg{SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{Core.kwftype(typeof(groebner_basis)),NamedTuple{(:ordering,), Tuple{Symbol}},typeof(groebner_basis),MPolyIdeal{AbstractAlgebra.Generic.MPoly{fmpz_mod}}})
    Base.precompile(Tuple{Core.kwftype(typeof(groebner_basis)),NamedTuple{(:ordering,), Tuple{Symbol}},typeof(groebner_basis),MPolyIdeal{AbstractAlgebra.Generic.MPoly{gfp_fmpz_elem}}})
    Base.precompile(Tuple{Core.kwftype(typeof(groebner_basis)),NamedTuple{(:ordering,), Tuple{Symbol}},typeof(groebner_basis),MPolyIdeal{gfp_mpoly}})
    Base.precompile(Tuple{Core.kwftype(typeof(groebner_basis)),NamedTuple{(:ordering,), Tuple{Symbol}},typeof(groebner_basis),MPolyIdeal{nmod_mpoly}})
    Base.precompile(Tuple{Core.kwftype(typeof(singular_ring)),NamedTuple{(:keep_ordering,), Tuple{Bool}},typeof(singular_ring),AbstractAlgebra.Generic.MPolyRing{QabElem}})
    Base.precompile(Tuple{Core.kwftype(typeof(singular_ring)),NamedTuple{(:keep_ordering,), Tuple{Bool}},typeof(singular_ring),FmpzMPolyRing})
    Base.precompile(Tuple{Core.kwftype(typeof(singular_ring)),NamedTuple{(:keep_ordering,), Tuple{Bool}},typeof(singular_ring),MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}})
    Base.precompile(Tuple{Core.kwftype(typeof(tensor_product)),NamedTuple{(:task,), Tuple{Symbol}},typeof(tensor_product),FreeMod{fmpq_mpoly},Vararg{FreeMod{fmpq_mpoly}}})
    Base.precompile(Tuple{Core.kwftype(typeof(tensor_product)),NamedTuple{(:task,), Tuple{Symbol}},typeof(tensor_product),SubQuo{fmpq_mpoly},Vararg{ModuleFP}})
    Base.precompile(Tuple{Core.kwftype(typeof(tensor_product)),NamedTuple{(:task,), Tuple{Symbol}},typeof(tensor_product),SubQuo{fmpq_mpoly},Vararg{SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{FmpzMPolyRing,Singular.spoly{Singular.n_Z}})
    Base.precompile(Tuple{FqFiniteField,GapObj})
    Base.precompile(Tuple{FqNmodMPolyRing,Singular.spoly{Singular.n_algExt}})
    Base.precompile(Tuple{GAPGroupClassFunction,PermGroupElem})
    Base.precompile(Tuple{MPolyElem_dec{fmpq, fmpq_mpoly},MPolyElem_dec{fmpq, fmpq_mpoly},Vararg{MPolyElem_dec{fmpq, fmpq_mpoly}}})
    Base.precompile(Tuple{MPolyLocalizedRingHom{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly, MPolyPowersOfElement{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly}, MPolyPowersOfElement{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly}},fmpz_mpoly})
    Base.precompile(Tuple{MPolyLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Int64})
    Base.precompile(Tuple{MPolyLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{MatrixGroup{fq, fq_mat},fq_mat})
    Base.precompile(Tuple{MatrixGroup{fq_nmod, fq_nmod_mat},Matrix{Any}})
    Base.precompile(Tuple{MatrixGroup{fq_nmod, fq_nmod_mat},fq_nmod_mat})
    Base.precompile(Tuple{Nemo.GaloisFmpzField,GapObj})
    Base.precompile(Tuple{Singular.N_FField,AbstractAlgebra.Generic.Rat{fmpq}})
    Base.precompile(Tuple{Singular.N_FField,Frac{fmpq_mpoly}})
    Base.precompile(Tuple{Singular.N_FField,Frac{gfp_mpoly}})
    Base.precompile(Tuple{Type{AffineCurveDivisor},AffinePlaneCurve{fmpq},Dict{Point{fmpq}, Int64}})
    Base.precompile(Tuple{Type{AffineHalfspace},Polymake.MatrixAllocated{Polymake.Rational},Int64})
    Base.precompile(Tuple{Type{FreeMod_dec},MPolyRing_dec{fmpq, FmpqMPolyRing},Int64})
    Base.precompile(Tuple{Type{GModule},AbstractAlgebra.Generic.FreeModule{fmpz},PcGroup,Vector{AbstractAlgebra.Generic.ModuleHomomorphism{fmpz}}})
    Base.precompile(Tuple{Type{GModule},PcGroup,Vector{AbstractAlgebra.Generic.ModuleHomomorphism{fq_nmod}}})
    Base.precompile(Tuple{Type{Halfspace},Polymake.SparseVectorAllocated{Polymake.Rational},Polymake.RationalAllocated})
    Base.precompile(Tuple{Type{InvRing},AnticNumberField,MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}},Vector{AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}})
    Base.precompile(Tuple{Type{InvRing},FlintRationalField,MatrixGroup{fmpq, fmpq_mat},Vector{fmpq_mat}})
    Base.precompile(Tuple{Type{InvRing},FqNmodFiniteField,MatrixGroup{fq_nmod, fq_nmod_mat},Vector{fq_nmod_mat}})
    Base.precompile(Tuple{Type{InvRing},Nemo.GaloisField,MatrixGroup{gfp_elem, gfp_mat},Vector{gfp_mat}})
    Base.precompile(Tuple{Type{LocalizedBiPolyArray},MPolyLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Singular.sideal{Singular.spoly{Singular.n_Q}},Vector{fmpq},Bool})
    Base.precompile(Tuple{Type{MPolyComplementOfKPointIdeal},FmpqMPolyRing,Vector{fmpq}})
    Base.precompile(Tuple{Type{MPolyComplementOfKPointIdeal},FmpzMPolyRing,Vector{fmpz}})
    Base.precompile(Tuple{Type{MPolyComplementOfKPointIdeal},GFPMPolyRing,Vector{gfp_elem}})
    Base.precompile(Tuple{Type{MPolyComplementOfPrimeIdeal},MPolyIdeal{fmpz_mpoly}})
    Base.precompile(Tuple{Type{MPolyComplementOfPrimeIdeal},MPolyIdeal{gfp_mpoly}})
    Base.precompile(Tuple{Type{MPolyIdealLoc},MPolyRingLoc{fmpq},Singular.sideal{Singular.spoly{Singular.n_Q}}})
    Base.precompile(Tuple{Type{MPolyLocalizedRingHom},MPolyLocalizedRing{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly, MPolyPowersOfElement{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly}},FmpzMPolyRing,Vector{fmpz_mpoly}})
    Base.precompile(Tuple{Type{PointVector{Polymake.Integer}},Vector{Int64}})
    Base.precompile(Tuple{Type{Point_EllCurve},ProjEllipticCurve{fmpq},Oscar.Geometry.ProjSpcElem{fmpq}})
    Base.precompile(Tuple{Type{Point_EllCurve},ProjEllipticCurve{fmpz_mod},Oscar.Geometry.ProjSpcElem{fmpz_mod}})
    Base.precompile(Tuple{Type{PolyhedralFan},Vector{Cone}})
    Base.precompile(Tuple{Type{Polyhedron},Matrix{Int64},Int64})
    Base.precompile(Tuple{Type{Polyhedron},Matrix{Int64},Vector{Int64}})
    Base.precompile(Tuple{Type{Polyhedron},Matrix{fmpq},Vector{Int64}})
    Base.precompile(Tuple{Type{Polyhedron},Matrix{fmpz},Vector{Int64}})
    Base.precompile(Tuple{Type{Polyhedron},Polymake.MatrixAllocated{Polymake.Rational},Int64})
    Base.precompile(Tuple{Type{Polyhedron},Polymake.MatrixAllocated{Polymake.Rational},Polymake.RationalAllocated})
    Base.precompile(Tuple{Type{ProjCurveDivisor},ProjPlaneCurve{fmpq},Dict{Oscar.Geometry.ProjSpcElem{fmpq}, Int64}})
    Base.precompile(Tuple{Type{ProjEllipticCurve},MPolyElem_dec{fmpq, fmpq_mpoly},Oscar.Geometry.ProjSpcElem{fmpq}})
    Base.precompile(Tuple{Type{ProjEllipticCurve},MPolyElem_dec{fmpq, fmpq_mpoly}})
    Base.precompile(Tuple{Type{ProjEllipticCurve},MPolyElem_dec{fmpz_mod, AbstractAlgebra.Generic.MPoly{fmpz_mod}}})
    Base.precompile(Tuple{Type{ProjEllipticCurve},MPolyElem_dec{fq_nmod, fq_nmod_mpoly},Oscar.Geometry.ProjSpcElem{fq_nmod}})
    Base.precompile(Tuple{Type{QabElem},GapObj})
    Base.precompile(Tuple{Type{SpecMor},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{RingElem}})
    Base.precompile(Tuple{Type{SpecMor},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{fmpq_mpoly}})
    Base.precompile(Tuple{Type{Spec},MPolyQuo{fmpq_mpoly}})
    Base.precompile(Tuple{Type{SubModuleOfFreeModule},FreeMod{fq_nmod_mpoly},Vector{FreeModElem{fq_nmod_mpoly}}})
    Base.precompile(Tuple{Type{SubQuo},FreeMod{fq_nmod_mpoly},AbstractAlgebra.Generic.MatSpaceElem{fq_nmod_mpoly},AbstractAlgebra.Generic.MatSpaceElem{fq_nmod_mpoly}})
    Base.precompile(Tuple{Type{SubdivisionOfPoints},Matrix{Int64},Polymake.IncidenceMatrixAllocated{Polymake.NonSymmetric}})
    Base.precompile(Tuple{typeof(*),AbstractAlgebra.Generic.Res{BigInt},SLPoly{AbstractAlgebra.Generic.Res{BigInt}, SLPolyRing{AbstractAlgebra.Generic.Res{BigInt}, AbstractAlgebra.Generic.ResRing{BigInt}}}})
    Base.precompile(Tuple{typeof(*),FractionalIdeal{MPolyIdeal{fmpq_mpoly}, fmpq_mpoly},fmpq_mpoly})
    Base.precompile(Tuple{typeof(*),FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}},FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(*),Int64,AffineCurveDivisor{fmpq}})
    Base.precompile(Tuple{typeof(*),Int64,ProjCurveDivisor{fmpq}})
    Base.precompile(Tuple{typeof(*),MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(*),MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly},MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}})
    Base.precompile(Tuple{typeof(*),MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(*),SubQuoHom{SubQuo{fmpq_mpoly}, FreeMod{fmpq_mpoly}},FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(*),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}},SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(*),SubQuoHom{SubQuo{fmpz_mpoly}, FreeMod{fmpz_mpoly}},FreeModuleHom{FreeMod{fmpz_mpoly}, FreeMod{fmpz_mpoly}}})
    Base.precompile(Tuple{typeof(*),fmpq_mpoly,SubQuoElem{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(+),MPolyIdealLoc{MPolyElemLoc{fmpq}},MPolyIdealLoc{MPolyElemLoc{fmpq}}})
    Base.precompile(Tuple{typeof(+),Vector{Int64},Polyhedron})
    Base.precompile(Tuple{typeof(-),FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}},FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(-),FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(-),SLPoly{fmpq, SLPolyRing{fmpq, FlintRationalField}}})
    Base.precompile(Tuple{typeof(-),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}},SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(==),Cone,Cone})
    Base.precompile(Tuple{typeof(==),MPolyIdeal{AbstractAlgebra.Generic.MPoly{QabElem}},MPolyIdeal{AbstractAlgebra.Generic.MPoly{QabElem}}})
    Base.precompile(Tuple{typeof(==),MPolyIdeal{MPolyElem_dec{gfp_elem, gfp_mpoly}},MPolyIdeal{MPolyElem_dec{gfp_elem, gfp_mpoly}}})
    Base.precompile(Tuple{typeof(==),MPolyIdeal{MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}},MPolyIdeal{MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}}})
    Base.precompile(Tuple{typeof(==),MPolyIdeal{MPolyElem_dec{nmod, nmod_mpoly}},MPolyIdeal{MPolyElem_dec{nmod, nmod_mpoly}}})
    Base.precompile(Tuple{typeof(==),MPolyIdeal{fmpq_mpoly},MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(==),MPolyIdeal{fmpz_mpoly},MPolyIdeal{fmpz_mpoly}})
    Base.precompile(Tuple{typeof(==),MonomialOrdering{FmpqMPolyRing},MonomialOrdering{FmpqMPolyRing}})
    Base.precompile(Tuple{typeof(==),SubQuoElem{fq_nmod_mpoly},SubQuoElem{fq_nmod_mpoly}})
    Base.precompile(Tuple{typeof(AlgebraHomomorphism),MPolyQuo{gfp_mpoly},MPolyQuo{gfp_mpoly},Vector{MPolyQuoElem{gfp_mpoly}}})
    Base.precompile(Tuple{typeof(DivisorOfCharacter),NormalToricVariety,Vector{Int64}})
    Base.precompile(Tuple{typeof(ECM),fmpz})
    Base.precompile(Tuple{typeof(Localization),MPolyLocalizedRing{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly, MPolyPowersOfElement{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly}},fmpz_mpoly})
    Base.precompile(Tuple{typeof(NumberField),MPolyIdeal{AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(NumberField),MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(Oscar.GITFans.compute_bit_list),Vector{Any},Vector{Rational{BigInt}}})
    Base.precompile(Tuple{typeof(Oscar.GITFans.find_smallest_orbit_element),Vector{BitSet},Vector{Vector{Vector{Int64}}},Function,Function,Function})
    Base.precompile(Tuple{typeof(Oscar.GITFans.get_neighbor_hash),Vector{Any},Vector{Rational{BigInt}},Vector{Rational{BigInt}}})
    Base.precompile(Tuple{typeof(Oscar.GITFans.git_fan),MPolyIdeal{fmpq_mpoly},Matrix{Int64},PermGroup})
    Base.precompile(Tuple{typeof(Oscar.GITFans.orbit),Polymake.BigObjectAllocated,Vector{Matrix{BigInt}},typeof(Oscar.GITFans.matrix_action_on_cones),Type{Polymake.polytope.equal_polyhedra}})
    Base.precompile(Tuple{typeof(Oscar.GITFans.orbit),Vector{BitSet},Vector{Vector{Vector{Int64}}},typeof(Oscar.GITFans.bitlist_oper_tuple),typeof(==)})
    Base.precompile(Tuple{typeof(Oscar.GModuleFromGap.Gap),GModule{PcGroup, AbstractAlgebra.Generic.FreeModule{fq_nmod}},MapFromFunc{FqNmodFiniteField, GapObj}})
    Base.precompile(Tuple{typeof(Oscar.GModuleFromGap.hom_base),GModule{PcGroup, AbstractAlgebra.Generic.FreeModule{QabElem}},GModule{PcGroup, AbstractAlgebra.Generic.FreeModule{QabElem}}})
    Base.precompile(Tuple{typeof(Oscar.GModuleFromGap.hom_base),GModule{PcGroup, AbstractAlgebra.Generic.FreeModule{fq_nmod}},GModule{PcGroup, AbstractAlgebra.Generic.FreeModule{fq_nmod}}})
    Base.precompile(Tuple{typeof(Oscar.GaloisGrp.find_transformation),Vector{fq_nmod},SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}},Vector{PermGroupElem}})
    Base.precompile(Tuple{typeof(Oscar.GaloisGrp.sum_orbits),AnticNumberField,FqNmodFiniteField,Vector{fq_nmod}})
    Base.precompile(Tuple{typeof(Oscar.GaloisGrp.upper_bound),Oscar.GaloisGrp.GaloisCtx{Hecke.qAdicRootCtx},SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}},fmpz_poly})
    Base.precompile(Tuple{typeof(Oscar.Orderings.simplify_weight_matrix),Oscar.Orderings.ProdOrdering})
    Base.precompile(Tuple{typeof(Oscar.PlaneCurveModule._completion),FmpqMPolyRing,Oscar.Geometry.ProjSpcElem{fmpq},Oscar.Geometry.ProjSpcElem{fmpq}})
    Base.precompile(Tuple{typeof(Oscar.PlaneCurveModule._completion),FqNmodMPolyRing,Oscar.Geometry.ProjSpcElem{fq_nmod},Oscar.Geometry.ProjSpcElem{fq_nmod}})
    Base.precompile(Tuple{typeof(Oscar.PlaneCurveModule._global_sections_helper),MPolyIdeal{fmpq_mpoly},MPolyIdeal{fmpq_mpoly},MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(Oscar.PlaneCurveModule.contract),Int64,fmpq_mpoly})
    Base.precompile(Tuple{typeof(Oscar.RepPc.reps),QabField,PcGroup})
    Base.precompile(Tuple{typeof(Oscar.StraightLinePrograms.compile!),SLPoly{Int64, SLPolyRing{Int64, AbstractAlgebra.Integers{Int64}}}})
    Base.precompile(Tuple{typeof(Oscar.StraightLinePrograms.evaluate),SLProgram{fmpz},Vector{Oscar.GaloisGrp.BoundRingElem{fmpz}},Oscar.GaloisGrp.BoundRing{fmpz}})
    Base.precompile(Tuple{typeof(Pollard_p_1),fmpz})
    Base.precompile(Tuple{typeof(PolynomialRing),FlintRationalField,Pair{Symbol, UnitRange{Int64}}})
    Base.precompile(Tuple{typeof(SLPolynomialRing),FlintRationalField,Int64})
    Base.precompile(Tuple{typeof(^),DirectProductGroup,BasicGAPGroupElem{DirectProductGroup}})
    Base.precompile(Tuple{typeof(^),MatrixGroup{fq, fq_mat},MatrixGroupElem{fq, fq_mat}})
    Base.precompile(Tuple{typeof(__cellular_hull),MPolyIdeal{AbstractAlgebra.Generic.MPoly{QabElem}}})
    Base.precompile(Tuple{typeof(_centralizer),fq_nmod_poly})
    Base.precompile(Tuple{typeof(_change_basis_forms),fq_mat,fq_mat,Symbol})
    Base.precompile(Tuple{typeof(_change_basis_forms),fq_nmod_mat,fq_nmod_mat,Symbol})
    Base.precompile(Tuple{typeof(_change_type),gfp_poly})
    Base.precompile(Tuple{typeof(_containement_helper),FmpqMPolyRing,Int64,Int64,MPolyIdeal{fmpq_mpoly},Vector{fmpq_mpoly},Symbol})
    Base.precompile(Tuple{typeof(_conv_normalize_data),MPolyQuo{fmpq_mpoly},Vector{Vector},FlintRationalField})
    Base.precompile(Tuple{typeof(_conv_normalize_data),MPolyQuo{gfp_mpoly},Vector{Vector},Nemo.GaloisField})
    Base.precompile(Tuple{typeof(_face_cone_facet),Type{Cone},Polymake.BigObjectAllocated,Int64})
    Base.precompile(Tuple{typeof(_face_polyhedron_facet),Type{Polyhedron},Polymake.BigObjectAllocated,Int64})
    Base.precompile(Tuple{typeof(_facet_at_infinity),Polymake.BigObjectAllocated})
    Base.precompile(Tuple{typeof(_facet_cone),Type{Cone},Polymake.BigObjectAllocated,Int64})
    Base.precompile(Tuple{typeof(_gens),fmpz_mod_mat,Int64,Int64})
    Base.precompile(Tuple{typeof(_gens),fmpz_mod_mat,Int64,fmpz})
    Base.precompile(Tuple{typeof(_iso_gap_oscar),GapObj})
    Base.precompile(Tuple{typeof(_isomorphic_gap_group),GrpAbFinGen})
    Base.precompile(Tuple{typeof(_isomorphic_group_over_finite_field),Vector{AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}})
    Base.precompile(Tuple{typeof(_isomorphic_group_over_finite_field),Vector{fmpq_mat}})
    Base.precompile(Tuple{typeof(_kbase),MPolyQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(_vertex_indices),Polymake.BigObjectAllocated})
    Base.precompile(Tuple{typeof(action),GModule{PcGroup, AbstractAlgebra.Generic.FreeModule{QabElem}},PcGroupElem})
    Base.precompile(Tuple{typeof(action_homomorphism),GSetByElements{PermGroup}})
    Base.precompile(Tuple{typeof(addeq!),SLPoly{Int64, SLPolyRing{Int64, AbstractAlgebra.Integers{Int64}}},SLPoly{Int64, SLPolyRing{Int64, AbstractAlgebra.Integers{Int64}}}})
    Base.precompile(Tuple{typeof(all_small_groups),Int64,Function})
    Base.precompile(Tuple{typeof(all_small_groups),Int64})
    Base.precompile(Tuple{typeof(all_transitive_groups),Function,Vararg{Any}})
    Base.precompile(Tuple{typeof(archimedean_solid),String})
    Base.precompile(Tuple{typeof(aretransverse),AffinePlaneCurve{fmpq},AffinePlaneCurve{fmpq},Point{fmpq}})
    Base.precompile(Tuple{typeof(aretransverse),ProjPlaneCurve{fmpq},ProjPlaneCurve{fmpq},Oscar.Geometry.ProjSpcElem{fmpq}})
    Base.precompile(Tuple{typeof(arithmetic_genus),AffinePlaneCurve{gfp_elem}})
    Base.precompile(Tuple{typeof(arithmetic_genus),ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(basis),InvRing{AnticNumberField, MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}, MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}, Singular.smatrix{Singular.spoly{Singular.n_algExt}}},Int64})
    Base.precompile(Tuple{typeof(basis),InvRing{Nemo.GaloisField, MatrixGroup{gfp_elem, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}, MPolyRing_dec{gfp_elem, GFPMPolyRing}, gfp_mat, Singular.smatrix{Singular.spoly{Singular.n_Zp}}},Int64})
    Base.precompile(Tuple{typeof(betti_number),NormalToricVariety,Int64})
    Base.precompile(Tuple{typeof(binomial_primary_decomposition),MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(bipyramid),Polyhedron})
    Base.precompile(Tuple{typeof(birkhoff),Int64})
    Base.precompile(Tuple{typeof(blowup_on_ith_minimal_torus_orbit),NormalToricVariety,Int64,String})
    Base.precompile(Tuple{typeof(bring_to_common_denominator),Vector{MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(cellular_minimal_associated_primes),MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(character_table),String})
    Base.precompile(Tuple{typeof(class_group),NormalToricVariety})
    Base.precompile(Tuple{typeof(closure),SpecOpen{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(closure),Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(comm),MatrixGroupElem{fq_nmod, fq_nmod_mat},MatrixGroupElem{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(complement),AbstractAlgebra.Generic.FreeModule{fq_nmod},AbstractAlgebra.Generic.Submodule{fq_nmod}})
    Base.precompile(Tuple{typeof(complement),AbstractAlgebra.Generic.FreeModule{fq},AbstractAlgebra.Generic.Submodule{fq}})
    Base.precompile(Tuple{typeof(complement),Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(compose),GAPGroupHomomorphism{PermGroup, PermGroup},GAPGroupHomomorphism{PermGroup, PcGroup}})
    Base.precompile(Tuple{typeof(conjugacy_classes),MatrixGroup{fq, fq_mat}})
    Base.precompile(Tuple{typeof(conjugacy_classes),MatrixGroup{gfp_elem, gfp_mat}})
    Base.precompile(Tuple{typeof(conjugacy_classes),PermGroup})
    Base.precompile(Tuple{typeof(convert),SLPolyRing{Int64, AbstractAlgebra.Integers{Int64}},AbstractAlgebra.Generic.MPoly{Int64}})
    Base.precompile(Tuple{typeof(convert_singular_ideal_to_array),Singular.sideal{Singular.spoly{Singular.n_Q}}})
    Base.precompile(Tuple{typeof(convex_hull),Matrix{fmpq}})
    Base.precompile(Tuple{typeof(convex_hull),SubObjectIterator{PointVector{Polymake.Rational}}})
    Base.precompile(Tuple{typeof(convex_hull),fmpz_mat})
    Base.precompile(Tuple{typeof(corresponding_quadratic_form),SesquilinearForm{fq_nmod}})
    Base.precompile(Tuple{typeof(cox_ring),AffineNormalToricVariety})
    Base.precompile(Tuple{typeof(cox_ring),NormalToricVariety})
    Base.precompile(Tuple{typeof(cube),Int64,Int64,Int64})
    Base.precompile(Tuple{typeof(cube),Int64})
    Base.precompile(Tuple{typeof(curve_components),AffinePlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(curve_components),ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(curve_intersect),AffinePlaneCurve{fmpq},AffinePlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(curve_intersect),Oscar.Geometry.ProjSpc{fmpq},ProjPlaneCurve{fmpq},ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(curve_singular_locus),AffinePlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(curve_singular_locus),ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(decompose_hdata),Polymake.SparseMatrixAllocated{Polymake.Rational}})
    Base.precompile(Tuple{typeof(decorate),AbstractAlgebra.Generic.MPolyRing{nf_elem}})
    Base.precompile(Tuple{typeof(decorate),FmpqMPolyRing})
    Base.precompile(Tuple{typeof(decorate),GFPMPolyRing})
    Base.precompile(Tuple{typeof(decorate),NmodMPolyRing})
    Base.precompile(Tuple{typeof(degree),ToricLineBundle})
    Base.precompile(Tuple{typeof(del_pezzo),Int64})
    Base.precompile(Tuple{typeof(denest),FmpqPolyRing})
    Base.precompile(Tuple{typeof(dim),MPolyIdeal{fq_nmod_mpoly}})
    Base.precompile(Tuple{typeof(direct_product),PcGroup,PcGroup})
    Base.precompile(Tuple{typeof(direct_product),PermGroup,PcGroup})
    Base.precompile(Tuple{typeof(divexact),MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}},MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(evaluate),SLPoly{Int64, SLPolyRing{Int64, AbstractAlgebra.Integers{Int64}}},Vector{SLPoly{Int64, SLPolyRing{Int64, AbstractAlgebra.Integers{Int64}}}}})
    Base.precompile(Tuple{typeof(evaluate),SLPoly{fmpq, SLPolyRing{fmpq, FlintRationalField}},Vector{SLPoly{fmpq, SLPolyRing{fmpq, FlintRationalField}}}})
    Base.precompile(Tuple{typeof(evaluate),SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}},PermGroupElem,Vector{qadic}})
    Base.precompile(Tuple{typeof(evaluate),SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}},Vector{Oscar.GaloisGrp.BoundRingElem{fmpz}}})
    Base.precompile(Tuple{typeof(evaluate),SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}},Vector{SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}}}})
    Base.precompile(Tuple{typeof(evaluate),SLPoly{fmpz, SLPolyRing{fmpz, FlintIntegerRing}},Vector{fq_nmod}})
    Base.precompile(Tuple{typeof(faces),Polyhedron,Int64})
    Base.precompile(Tuple{typeof(factor),MPolyElem_dec{fmpq, fmpq_mpoly}})
    Base.precompile(Tuple{typeof(factorisations),NfOrdElem})
    Base.precompile(Tuple{typeof(fixed_field),Oscar.GaloisGrp.GaloisCtx{Hecke.qAdicRootCtx},PermGroup})
    Base.precompile(Tuple{typeof(fp_group),Vector{PcGroupElem}})
    Base.precompile(Tuple{typeof(fundamental_invariants),InvRing{AnticNumberField, MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}, MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}, Singular.smatrix{Singular.spoly{Singular.n_algExt}}}})
    Base.precompile(Tuple{typeof(fundamental_invariants),InvRing{Nemo.GaloisField, MatrixGroup{gfp_elem, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}, MPolyRing_dec{gfp_elem, GFPMPolyRing}, gfp_mat, Singular.smatrix{Singular.spoly{Singular.n_Zp}}}})
    Base.precompile(Tuple{typeof(galois_group),AnticNumberField})
    Base.precompile(Tuple{typeof(gelfand_tsetlin),Vector{Int64}})
    Base.precompile(Tuple{typeof(gens),MPolyQuoLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(gens),MPolyQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(gens),MatrixGroup{fmpq, fmpq_mat}})
    Base.precompile(Tuple{typeof(gens),MatrixGroup{fq, fq_mat}})
    Base.precompile(Tuple{typeof(gens),MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}})
    Base.precompile(Tuple{typeof(geometric_genus),AffinePlaneCurve{gfp_elem}})
    Base.precompile(Tuple{typeof(getindex),AbstractAlgebra.Generic.FreeModule{QabElem},Int64})
    Base.precompile(Tuple{typeof(getindex),GAPGroupCharacterTable,Int64})
    Base.precompile(Tuple{typeof(global_sections),ProjCurveDivisor{fmpq}})
    Base.precompile(Tuple{typeof(gmodule),AbstractAlgebra.Generic.FreeModule{QabElem},PcGroup,Vector{AbstractAlgebra.Generic.ModuleHomomorphism{QabElem}}})
    Base.precompile(Tuple{typeof(gmodule),AbstractAlgebra.Generic.FreeModule{QabElem},PcGroup,Vector{Map}})
    Base.precompile(Tuple{typeof(gmodule),PcGroup,Vector{fmpz_mat}})
    Base.precompile(Tuple{typeof(grade),AbstractAlgebra.Generic.MPolyRing{fmpq_mpoly},Vector{Int64}})
    Base.precompile(Tuple{typeof(grade),AbstractAlgebra.Generic.MPolyRing{fmpz_mod}})
    Base.precompile(Tuple{typeof(grade),FqNmodMPolyRing})
    Base.precompile(Tuple{typeof(graph),SpecMor{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(groebner_basis),MPolyIdeal{AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(groebner_basis),MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(groebner_basis),MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfPrimeIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(hom),AbstractAlgebra.Generic.FreeModule{QabElem},AbstractAlgebra.Generic.FreeModule{QabElem},Vector{AbstractAlgebra.Generic.FreeModuleElem{QabElem}}})
    Base.precompile(Tuple{typeof(hom),FmpqMPolyRing,FmpqMPolyRing,Vector{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(hom),FmpqMPolyRing,MPolyQuo{fmpq_mpoly},Vector{MPolyQuoElem{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(hom),FmpqMPolyRing,MPolyRing_dec{fmpq, FmpqMPolyRing},Vector{MPolyElem_dec{fmpq, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(hom),FreeMod_dec{MPolyElem_dec{fmpq, fmpq_mpoly}},FreeMod_dec{MPolyElem_dec{fmpq, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(hom),FreeMod{fmpq_mpoly},FreeMod{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(hom),FreeMod{fmpq_mpoly},SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(hom),MPolyRing_dec{fq_nmod, FqNmodMPolyRing},MPolyRing_dec{fq_nmod, FqNmodMPolyRing},Vector{MPolyElem_dec{fq_nmod, fq_nmod_mpoly}}})
    Base.precompile(Tuple{typeof(hom),SubQuo{fmpq_mpoly},FreeMod{fmpq_mpoly},Vector{ModuleFPElem}})
    Base.precompile(Tuple{typeof(hom),SubQuo{fmpq_mpoly},FreeMod{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(hom),SubQuo{fmpq_mpoly},SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(hom),SubQuo{fmpz_mpoly},SubQuo{fmpz_mpoly},Vector{ModuleFPElem}})
    Base.precompile(Tuple{typeof(hom_matrices_helper),AbstractAlgebra.Generic.MatSpaceElem{fmpq_mpoly},AbstractAlgebra.Generic.MatSpaceElem{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(hom_prod_prod),SubQuo{fmpq_mpoly},SubQuo{fmpq_mpoly},Matrix{SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(hom_tensor),SubQuo{fmpq_mpoly},SubQuo{fmpq_mpoly},Vector{SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(homogeneous_component),MPolyRing_dec{fmpq, FmpqMPolyRing},GrpAbFinGenElem})
    Base.precompile(Tuple{typeof(homogeneous_component),MPolyRing_dec{gfp_elem, GFPMPolyRing},GrpAbFinGenElem})
    Base.precompile(Tuple{typeof(homogeneous_component),MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}},GrpAbFinGenElem})
    Base.precompile(Tuple{typeof(homogeneous_components),MPolyQuoElem{MPolyElem_dec{fmpq, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(homogeneous_components),MPolyQuoElem{MPolyElem_dec{gfp_elem, gfp_mpoly}}})
    Base.precompile(Tuple{typeof(homogeneous_components),MPolyQuoElem{MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}}})
    Base.precompile(Tuple{typeof(homogeneous_components),MPolyQuoElem{MPolyElem_dec{nmod, nmod_mpoly}}})
    Base.precompile(Tuple{typeof(homogenize),Polymake.MatrixAllocated{Polymake.Integer}})
    Base.precompile(Tuple{typeof(ideal),AbstractAlgebra.Generic.MPolyRing{fmpz_mod},Vector{AbstractAlgebra.Generic.MPoly{fmpz_mod}}})
    Base.precompile(Tuple{typeof(ideal),AbstractAlgebra.Generic.MPolyRing{gfp_fmpz_elem},Vector{AbstractAlgebra.Generic.MPoly{gfp_fmpz_elem}}})
    Base.precompile(Tuple{typeof(ideal),FmpqMPolyRing,Vector{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(ideal),GFPMPolyRing,Vector{gfp_mpoly}})
    Base.precompile(Tuple{typeof(ideal),MPolyLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(ideal),MPolyLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfPrimeIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(ideal),MPolyQuoLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(ideal),MPolyQuoLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(ideal),MPolyQuo{fmpq_mpoly},Vector{MPolyQuoElem{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(ideal),MPolyRingLoc{fmpq},Vector{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(ideal),NmodMPolyRing,Vector{nmod_mpoly}})
    Base.precompile(Tuple{typeof(ideal),Vector{MPolyElem_dec{gfp_elem, gfp_mpoly}}})
    Base.precompile(Tuple{typeof(ideal),Vector{MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}}})
    Base.precompile(Tuple{typeof(ideal),Vector{MPolyElem_dec{nmod, nmod_mpoly}}})
    Base.precompile(Tuple{typeof(ideal_point),FmpqMPolyRing,Point{fmpq}})
    Base.precompile(Tuple{typeof(in),Frac{fmpq_mpoly},MPolyQuoLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(in),Frac{fmpq_mpoly},MPolyQuoLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(in),Frac{fmpq_mpoly},MPolyQuoLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(in),fmpq_mpoly,MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(in),fmpq_mpoly,MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(in),fmpz_mpoly,MPolyPowersOfElement{FlintIntegerRing, fmpz, FmpzMPolyRing, fmpz_mpoly}})
    Base.precompile(Tuple{typeof(integral_basis),Singular.spoly{Singular.n_Q},Int64})
    Base.precompile(Tuple{typeof(integral_basis),fmpq_mpoly,Int64})
    Base.precompile(Tuple{typeof(integral_basis),gfp_mpoly,Int64})
    Base.precompile(Tuple{typeof(intersect),DirectProductGroup,DirectProductGroup})
    Base.precompile(Tuple{typeof(intersect),MatrixGroup{fq_nmod, fq_nmod_mat},MatrixGroup{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(intersect),PermGroup,PermGroup})
    Base.precompile(Tuple{typeof(intersect),PermGroup})
    Base.precompile(Tuple{typeof(intersect),Vector{MatrixGroup{fq_nmod, fq_nmod_mat}}})
    Base.precompile(Tuple{typeof(inv),AbstractAlgebra.Generic.ModuleHomomorphism{QabElem}})
    Base.precompile(Tuple{typeof(inv),MPolyQuoElem{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(inv),NfNSGenElem{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(inv),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(invariant_bilinear_forms),MatrixGroup{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(invariant_hermitian_forms),MatrixGroup{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(invariant_ring),AbstractAlgebra.Generic.MatSpaceElem{nf_elem},AbstractAlgebra.Generic.MatSpaceElem{nf_elem}})
    Base.precompile(Tuple{typeof(invariant_ring),MatrixGroup{fmpq, fmpq_mat}})
    Base.precompile(Tuple{typeof(invariant_ring),MatrixGroup{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(invariant_ring),gfp_mat,gfp_mat})
    Base.precompile(Tuple{typeof(invariant_sesquilinear_forms),MatrixGroup{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(inverse),AlgHom{fmpq}})
    Base.precompile(Tuple{typeof(invert_birational_map),Vector{MPolyElem_dec{fmpq, fmpq_mpoly}},ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(irreducible_modules),FlintIntegerRing,PcGroup})
    Base.precompile(Tuple{typeof(irreducible_modules),PcGroup})
    Base.precompile(Tuple{typeof(irrelevant_ideal),NormalToricVariety})
    Base.precompile(Tuple{typeof(is_isomorphism),SpecMor{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(is_projective_space),NormalToricVariety})
    Base.precompile(Tuple{typeof(isabelian),WreathProductGroup})
    Base.precompile(Tuple{typeof(isbijective),SubQuoHom{SubQuo{fmpz_mpoly}, SubQuo{fmpz_mpoly}}})
    Base.precompile(Tuple{typeof(iscellular),MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(isconjugate),MatrixGroup{fq_nmod, fq_nmod_mat},MatrixGroupElem{fq_nmod, fq_nmod_mat},MatrixGroupElem{fq_nmod, fq_nmod_mat}})
    Base.precompile(Tuple{typeof(isgenerated_by_standard_unit_vectors),SubModuleOfFreeModule{fmpz_mpoly}})
    Base.precompile(Tuple{typeof(isinjective),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(isirreducible),ProjCurve})
    Base.precompile(Tuple{typeof(islinearly_equivalent),ProjCurveDivisor{fmpq},ProjCurveDivisor{fmpq}})
    Base.precompile(Tuple{typeof(iso_oscar_gap),Nemo.GaloisField})
    Base.precompile(Tuple{typeof(isometry_group),ZLat})
    Base.precompile(Tuple{typeof(isomorphic_group_over_finite_field),MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}})
    Base.precompile(Tuple{typeof(iswelldefined),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(iszero),MPolyQuoIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(iterate),InvRingBasisIterator{InvRing{FlintRationalField, MatrixGroup{fmpq, fmpq_mat}, MPolyElem_dec{fmpq, fmpq_mpoly}, MPolyRing_dec{fmpq, FmpqMPolyRing}, fmpq_mat, Singular.smatrix{Singular.spoly{Singular.n_Q}}}, AllMonomials{MPolyRing_dec{fmpq, FmpqMPolyRing}}, MPolyElem_dec{fmpq, fmpq_mpoly}, fmpq_mat},Tuple{fmpq_mat, Dict{MPolyElem_dec{fmpq, fmpq_mpoly}, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{fmpq}}})
    Base.precompile(Tuple{typeof(iterate),VectorSpaceIteratorFiniteField{Nemo.GaloisField, InvRingBasisIterator{InvRing{Nemo.GaloisField, MatrixGroup{gfp_elem, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}, MPolyRing_dec{gfp_elem, GFPMPolyRing}, gfp_mat, Singular.smatrix{Singular.spoly{Singular.n_Zp}}}, AllMonomials{MPolyRing_dec{gfp_elem, GFPMPolyRing}}, MPolyElem_dec{gfp_elem, gfp_mpoly}, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}},Tuple{Int64, Vector{Int64}, Int64, Vector{gfp_elem}, Vector{UInt64}}})
    Base.precompile(Tuple{typeof(iterate),VectorSpaceIteratorFiniteField{Nemo.GaloisField, InvRingBasisIterator{InvRing{Nemo.GaloisField, MatrixGroup{gfp_elem, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}, MPolyRing_dec{gfp_elem, GFPMPolyRing}, gfp_mat, Singular.smatrix{Singular.spoly{Singular.n_Zp}}}, AllMonomials{MPolyRing_dec{gfp_elem, GFPMPolyRing}}, MPolyElem_dec{gfp_elem, gfp_mpoly}, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}}})
    Base.precompile(Tuple{typeof(iterate),VectorSpaceIteratorRand{AnticNumberField, InvRingBasisIterator{InvRing{AnticNumberField, MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}, MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}, Singular.smatrix{Singular.spoly{Singular.n_algExt}}}, AllMonomials{MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}},Tuple{Int64, Vector{Int64}, Int64}})
    Base.precompile(Tuple{typeof(iterate),VectorSpaceIteratorRand{FlintRationalField, InvRingBasisIterator{InvRing{FlintRationalField, MatrixGroup{fmpq, fmpq_mat}, MPolyElem_dec{fmpq, fmpq_mpoly}, MPolyRing_dec{fmpq, FmpqMPolyRing}, fmpq_mat, Singular.smatrix{Singular.spoly{Singular.n_Q}}}, AllMonomials{MPolyRing_dec{fmpq, FmpqMPolyRing}}, MPolyElem_dec{fmpq, fmpq_mpoly}, fmpq_mat}, MPolyElem_dec{fmpq, fmpq_mpoly}},Tuple{Int64, Vector{Int64}, Int64}})
    Base.precompile(Tuple{typeof(iterate),VectorSpaceIteratorRand{FlintRationalField, InvRingBasisIterator{InvRing{FlintRationalField, MatrixGroup{fmpq, fmpq_mat}, MPolyElem_dec{fmpq, fmpq_mpoly}, MPolyRing_dec{fmpq, FmpqMPolyRing}, fmpq_mat, Singular.smatrix{Singular.spoly{Singular.n_Q}}}, AllMonomials{MPolyRing_dec{fmpq, FmpqMPolyRing}}, MPolyElem_dec{fmpq, fmpq_mpoly}, fmpq_mat}, MPolyElem_dec{fmpq, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(jacobi_ideal),MPolyElem_dec{fmpq, fmpq_mpoly}})
    Base.precompile(Tuple{typeof(jacobi_ideal),MPolyElem_dec{fq_nmod, fq_nmod_mpoly}})
    Base.precompile(Tuple{typeof(jacobi_ideal),ProjCurve})
    Base.precompile(Tuple{typeof(kernel),FreeModuleHom{FreeMod{fmpq_mpoly}, FreeMod{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(kernel),FreeModuleHom{FreeMod{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(kernel),FreeModuleHom{FreeMod{fmpz_mpoly}, FreeMod{fmpz_mpoly}}})
    Base.precompile(Tuple{typeof(kernel),FreeModuleHom{FreeMod{fmpz_mpoly}, SubQuo{fmpz_mpoly}}})
    Base.precompile(Tuple{typeof(labelled_matrix_formatted),IOContext{IOBuffer},Matrix{String}})
    Base.precompile(Tuple{typeof(left_cosets),PermGroup,PermGroup})
    Base.precompile(Tuple{typeof(length),GSetByElements{PermGroup}})
    Base.precompile(Tuple{typeof(linear_symmetries),Polyhedron})
    Base.precompile(Tuple{typeof(map_canonically),SubQuo{fmpq_mpoly},SubQuoElem{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(map_to_rational_normal_curve),ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(matrices_over_cyclotomic_field),GapObj})
    Base.precompile(Tuple{typeof(matrix),AnticNumberField,GapObj})
    Base.precompile(Tuple{typeof(matrix),Vector{AbstractAlgebra.Generic.FreeModuleElem{fq_nmod}}})
    Base.precompile(Tuple{typeof(matrix),Vector{AbstractAlgebra.Generic.FreeModuleElem{fq}}})
    Base.precompile(Tuple{typeof(matrix_group),MatrixGroupElem{fq_nmod, fq_nmod_mat},MatrixGroupElem{fq_nmod, fq_nmod_mat},Vararg{MatrixGroupElem{fq_nmod, fq_nmod_mat}}})
    Base.precompile(Tuple{typeof(maximal_extension),Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{RingElem}})
    Base.precompile(Tuple{typeof(molien_series),FmpqPolyRing,InvRing{FqNmodFiniteField, MatrixGroup{fq_nmod, fq_nmod_mat}, MPolyElem_dec{fq_nmod, fq_nmod_mpoly}, MPolyRing_dec{fq_nmod, FqNmodMPolyRing}, fq_nmod_mat, Singular.smatrix{Singular.spoly{Singular.n_algExt}}}})
    Base.precompile(Tuple{typeof(monomials),fmpq_mpoly,Function})
    Base.precompile(Tuple{typeof(monomials),fmpq_mpoly,Matrix{Int64}})
    Base.precompile(Tuple{typeof(monomials),gfp_mpoly,Function})
    Base.precompile(Tuple{typeof(msolve),MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(natural_character),MatrixGroup{fmpq, fmpq_mat}})
    Base.precompile(Tuple{typeof(natural_character),MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}})
    Base.precompile(Tuple{typeof(newton_polytope),fmpq_mpoly})
    Base.precompile(Tuple{typeof(noether_normalization),MPolyQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(norm_equation),NfOrd,fmpz})
    Base.precompile(Tuple{typeof(normal_cone),Polyhedron,Int64})
    Base.precompile(Tuple{typeof(normal_fan),Polyhedron})
    Base.precompile(Tuple{typeof(normal_form),Vector{fmpq_mpoly},MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(orbit),ElementOfGSet})
    Base.precompile(Tuple{typeof(orbit_polytope),Vector{Int64},PermGroup})
    Base.precompile(Tuple{typeof(order),ProjEllipticCurve{fq_nmod}})
    Base.precompile(Tuple{typeof(orthogonal_group),QuadLat{AnticNumberField, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}, Hecke.PMat{nf_elem, Hecke.NfAbsOrdFracIdl{AnticNumberField, nf_elem}}}})
    Base.precompile(Tuple{typeof(orthogonal_group),TorQuadMod})
    Base.precompile(Tuple{typeof(parametrization_plane_curve),ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(picard_group),NormalToricVariety})
    Base.precompile(Tuple{typeof(preimage),AlgHom{fmpq},MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(preimage),AlgHom{fmpq},MPolyQuoElem{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(preimage),SpecMor{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(preimage),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}},SubQuo{fmpq_mpoly},Symbol})
    Base.precompile(Tuple{typeof(preimage_matrix),MapFromFunc{AnticNumberField, GapObj},GapObj})
    Base.precompile(Tuple{typeof(preimage_matrix),MapFromFunc{FqFiniteField, GapObj},GapObj})
    Base.precompile(Tuple{typeof(preimage_matrix),MapFromFunc{FqNmodFiniteField, GapObj},GapObj})
    Base.precompile(Tuple{typeof(present_as_cokernel),SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(primary_decomposition),MPolyIdeal{MPolyElem_dec{fmpq, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(primary_invariants_via_optimal_hsop),InvRing{FlintRationalField, MatrixGroup{fmpq, fmpq_mat}, MPolyElem_dec{fmpq, fmpq_mpoly}, MPolyRing_dec{fmpq, FmpqMPolyRing}, fmpq_mat, Singular.smatrix{Singular.spoly{Singular.n_Q}}}})
    Base.precompile(Tuple{typeof(primitive_element),NfNSGen{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(print),IOBuffer,GAPGroupCharacterTable})
    Base.precompile(Tuple{typeof(projective_space),FlintRationalField,Int64})
    Base.precompile(Tuple{typeof(projective_space),Nemo.FmpzModRing,Int64})
    Base.precompile(Tuple{typeof(quo),FreeMod{fmpz_mpoly},SubQuo{fmpz_mpoly}})
    Base.precompile(Tuple{typeof(quo),GFPMPolyRing,MPolyIdeal{gfp_mpoly}})
    Base.precompile(Tuple{typeof(quo),MPolyLocalizedRing{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},MPolyLocalizedIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(quo),MatrixGroup{fq_nmod, fq_nmod_mat},Vector{MatrixGroupElem{fq_nmod, fq_nmod_mat}}})
    Base.precompile(Tuple{typeof(quo),PcGroup,Vector{PcGroupElem}})
    Base.precompile(Tuple{typeof(quo),PermGroup,Vector{PermGroupElem}})
    Base.precompile(Tuple{typeof(radical),MPolyIdeal{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(rand),MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly},UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(rand),MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly},UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(rand),NfNSGen{fmpq, fmpq_mpoly},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(rand),NfNSGen{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(ray_indices),SubObjectIterator{Pair{PointVector{Polymake.Rational}, Halfspace}}})
    Base.precompile(Tuple{typeof(recession_cone),Polyhedron})
    Base.precompile(Tuple{typeof(reduce),MPolyLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},LocalizedBiPolyArray{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(reduce),MPolyLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfPrimeIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},LocalizedBiPolyArray{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfPrimeIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(reduce_fraction),MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(reduction),AffinePlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(reduction),ProjPlaneCurve{fmpq}})
    Base.precompile(Tuple{typeof(renest),FmpqMPolyRing,fmpq_mpoly})
    Base.precompile(Tuple{typeof(renest),FmpqPolyRing,fmpq_mpoly})
    Base.precompile(Tuple{typeof(restrict),SpecMor{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Spec{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(restrict_automorphism),AutomorphismGroupElem{PermGroup},PermGroup})
    Base.precompile(Tuple{typeof(restrict_domain),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}},SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(restriction),SpecOpenMor{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},SpecOpen{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},SpecOpen{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(reynolds_operator),InvRing{AnticNumberField, MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}, MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}, Singular.smatrix{Singular.spoly{Singular.n_algExt}}},MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(reynolds_operator),InvRing{Nemo.GaloisField, MatrixGroup{gfp_elem, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}, MPolyRing_dec{gfp_elem, GFPMPolyRing}, gfp_mat, Singular.smatrix{Singular.spoly{Singular.n_Zp}}},MPolyElem_dec{gfp_elem, gfp_mpoly}})
    Base.precompile(Tuple{typeof(secondary_invariants),InvRing{AnticNumberField, MatrixGroup{nf_elem, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}}, MPolyElem_dec{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}, MPolyRing_dec{nf_elem, AbstractAlgebra.Generic.MPolyRing{nf_elem}}, AbstractAlgebra.Generic.MatSpaceElem{nf_elem}, Singular.smatrix{Singular.spoly{Singular.n_algExt}}}})
    Base.precompile(Tuple{typeof(secondary_invariants),InvRing{Nemo.GaloisField, MatrixGroup{gfp_elem, gfp_mat}, MPolyElem_dec{gfp_elem, gfp_mpoly}, MPolyRing_dec{gfp_elem, GFPMPolyRing}, gfp_mat, Singular.smatrix{Singular.spoly{Singular.n_Zp}}}})
    Base.precompile(Tuple{typeof(show),IOBuffer,GAPGroupCharacterTable})
    Base.precompile(Tuple{typeof(show),IOBuffer,MIME{Symbol("text/latex")},GAPGroupCharacterTable})
    Base.precompile(Tuple{typeof(simple_extension),NfNSGen{fmpq, fmpq_mpoly}})
    Base.precompile(Tuple{typeof(simple_extension),NfNSGen{nf_elem, AbstractAlgebra.Generic.MPoly{nf_elem}}})
    Base.precompile(Tuple{typeof(simplify),SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(singular_ring),AbstractAlgebra.Generic.FracField{gfp_mpoly}})
    Base.precompile(Tuple{typeof(singular_ring),AbstractAlgebra.Generic.MPolyRing{AbstractAlgebra.Generic.Rat{fmpq}}})
    Base.precompile(Tuple{typeof(singular_ring),GFPMPolyRing,Oscar.Orderings.GenOrdering{UnitRange{Int64}}})
    Base.precompile(Tuple{typeof(singular_ring),QabField})
    Base.precompile(Tuple{typeof(slpoly_ring),FlintIntegerRing,Int64})
    Base.precompile(Tuple{typeof(sparse_matrix),FmpqMPolyRing,Singular.smodule{Singular.spoly{Singular.n_Q}},UnitRange{Int64},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(stanley_reisner_ideal),MPolyRing_dec{fmpq, FmpqMPolyRing},SimplicialComplex})
    Base.precompile(Tuple{typeof(stanley_reisner_ideal),MPolyRing_dec{gfp_elem, GFPMPolyRing},SimplicialComplex})
    Base.precompile(Tuple{typeof(stanley_reisner_ideal),NormalToricVariety})
    Base.precompile(Tuple{typeof(sub),BasicGAPGroupElem{DirectProductGroup},BasicGAPGroupElem{DirectProductGroup}})
    Base.precompile(Tuple{typeof(sub),BasicGAPGroupElem{WreathProductGroup}})
    Base.precompile(Tuple{typeof(sub),FreeMod{fmpz_mpoly},Vector{FreeModElem{fmpz_mpoly}}})
    Base.precompile(Tuple{typeof(sub),FreeMod{fmpz_mpoly},Vector{FreeModElem}})
    Base.precompile(Tuple{typeof(sub),PermGroupElem,PermGroupElem})
    Base.precompile(Tuple{typeof(sub),SubQuo{fmpq_mpoly},Vector{SubQuoElem}})
    Base.precompile(Tuple{typeof(sub),SubQuo{fmpz_mpoly},Vector{SubQuoElem}})
    Base.precompile(Tuple{typeof(subalgebra_membership),MPolyQuoElem{fmpq_mpoly},Vector{MPolyQuoElem{fmpq_mpoly}}})
    Base.precompile(Tuple{typeof(sum),SubQuo{fmpq_mpoly},SubQuo{fmpq_mpoly}})
    Base.precompile(Tuple{typeof(tangent_lines),AffinePlaneCurve{fmpq},Point{fmpq}})
    Base.precompile(Tuple{typeof(tangent_lines),ProjPlaneCurve{fmpq},Oscar.Geometry.ProjSpcElem{fmpq}})
    Base.precompile(Tuple{typeof(toric_ideal),AffineNormalToricVariety})
    Base.precompile(Tuple{typeof(toric_ideal),SubObjectIterator{PointVector{Polymake.Integer}},FlintRationalField})
    Base.precompile(Tuple{typeof(torsion_points_division_poly),ProjEllipticCurve{fmpq}})
    Base.precompile(Tuple{typeof(torsion_points_lutz_nagell),ProjEllipticCurve{fmpq}})
    Base.precompile(Tuple{typeof(torusinvariant_prime_divisors),AffineNormalToricVariety})
    Base.precompile(Tuple{typeof(toweierstrass),ProjPlaneCurve{fmpq},Oscar.Geometry.ProjSpcElem{fmpq}})
    Base.precompile(Tuple{typeof(trivial_character),PermGroup})
    Base.precompile(Tuple{typeof(trivial_subgroup),FPGroup})
    Base.precompile(Tuple{typeof(upper_bound_f_vector),Int64,Int64})
    Base.precompile(Tuple{typeof(values),GAPGroupClassFunction})
    Base.precompile(Tuple{typeof(vertex_indices),SubObjectIterator{Polyhedron}})
    Base.precompile(Tuple{typeof(vertices),Type{PointVector{Polymake.Rational}},Polyhedron})
    Base.precompile(Tuple{typeof(write_as_linear_combination),MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyComplementOfKPointIdeal{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(write_as_linear_combination),MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}},Vector{MPolyQuoLocalizedRingElem{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly, MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}}}})
    Base.precompile(Tuple{typeof(⊂),MPolyPowersOfElement{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly},MPolyProductOfMultSets{FlintRationalField, fmpq, FmpqMPolyRing, fmpq_mpoly}})
    isdefined(Oscar, Symbol("#1253#1257")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#1253#1257")),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    isdefined(Oscar, Symbol("#1327#1331")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#1327#1331")),PointVector{Polymake.Integer}})
    isdefined(Oscar, Symbol("#335#337")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#335#337")),GapObj})
    isdefined(Oscar, Symbol("#477#481")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#477#481")),AbstractAlgebra.Generic.FreeModuleElem{fmpq}})
    isdefined(Oscar, Symbol("#477#481")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#477#481")),AbstractAlgebra.Generic.FreeModuleElem{gfp_elem}})
    isdefined(Oscar, Symbol("#477#481")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#477#481")),AbstractAlgebra.Generic.FreeModuleElem{nf_elem}})
    isdefined(Oscar, Symbol("#im_func#963")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#im_func#963")),FreeModElem{fmpq_mpoly}})
    isdefined(Oscar, Symbol("#im_func#963")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#im_func#963")),FreeModElem{fmpz_mpoly}})
    isdefined(Oscar, Symbol("#pre#1085")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#pre#1085")),SubQuoHom{SubQuo{fmpq_mpoly}, SubQuo{fmpq_mpoly}}})
    isdefined(Oscar, Symbol("#pre#1287")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#pre#1287")),FreeModuleHom_dec{FreeMod_dec{MPolyElem_dec{fmpq, fmpq_mpoly}}, FreeMod_dec{MPolyElem_dec{fmpq, fmpq_mpoly}}}})
    isdefined(Oscar, Symbol("#pure#1159")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#pure#1159")),FreeModElem{MPolyElem_dec{fmpq, fmpq_mpoly}},FreeModElem{MPolyElem_dec{fmpq, fmpq_mpoly}}})
    isdefined(Oscar, Symbol("#pure#1159")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#pure#1159")),FreeModElem{fmpq_mpoly},FreeModElem{fmpq_mpoly}})
    isdefined(Oscar, Symbol("#pure#1198")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#pure#1198")),SubQuoElem{fmpq_mpoly},FreeModElem{fmpq_mpoly}})
    isdefined(Oscar, Symbol("#pure#1198")) && Base.precompile(Tuple{getfield(Oscar, Symbol("#pure#1198")),SubQuoElem{fmpq_mpoly},SubQuoElem{fmpq_mpoly}})
    isdefined(Oscar.GITFans, Symbol("#20#23")) && Base.precompile(Tuple{getfield(Oscar.GITFans, Symbol("#20#23")),Vector{Polymake.BigObjectAllocated}})
    isdefined(Oscar.GModuleFromGap, Symbol("#31#33")) && Base.precompile(Tuple{getfield(Oscar.GModuleFromGap, Symbol("#31#33")),AbstractAlgebra.Generic.ModuleHomomorphism{nf_elem}})
    isdefined(Oscar.GModuleFromGap, Symbol("#47#48")) && Base.precompile(Tuple{getfield(Oscar.GModuleFromGap, Symbol("#47#48")),AbstractAlgebra.Generic.ModuleHomomorphism{fq_nmod}})
end
